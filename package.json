{
  "name": "vslabx-extension",
  "displayName": "VSLABX (MPLABX Extension)",
  "version": "0.0.4",
  "publisher": "ya-technologies",
  "description": "Build, Program, and Debug MPLABX Projects.",
  "author": {
    "name": "Y@ Technologies"
  },
  "license": "MIT",
  "keywords": [
    "multi-root ready"
  ],
  "engines": {
    "vscode": "^1.64.0"
  },
  "icon": "images/vslabx-icon.png",
  "categories": [
    "Snippets",
    "Debuggers"
  ],
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/callwyat/mplab-extension.git"
  },
  "bugs": {
    "url": "https://github.com/callwyat/mplab-extension/issues"
  },
  "scripts": {
    "compile": "tsc -p ./",
    "lint": "eslint src --ext ts",
    "typecheck": "tsc -p tsconfig.json --noEmit",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --tsconfig=./tsconfig.json --external:vscode --format=cjs --platform=node --outfile=dist/extension.js",
    "watch": "npm run -S esbuild-base -- --sourcemap --sources-content=false --watch",
    "build": "npm run -S esbuild-base -- --sourcemap --sources-content=false",
    "package": "vsce package",
    "publish": "vsce publish",
    "publish-pre-release": "vsce publish --pre-release",
    "vscode:prepublish": "rimraf dist && npm run -S esbuild-base -- --minify",
    "test": "npm run typecheck"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "^14.18.12",
    "@types/vscode": "^1.64.0",
    "@types/xml2js": "^0.4.9",
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "^5.12.0",
    "@vscode/debugadapter": "^1.55.0-pre.1",
    "@vscode/debugadapter-testsupport": "^1.55.0-pre.1",
    "async-mutex": "^0.3.2",
    "await-notify": "1.0.1",
    "base64-js": "^1.5.1",
    "child_process": "^1.0.2",
    "esbuild": "^0.14.21",
    "eslint": "^8.9.0",
    "events": "^3.3.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.0",
    "path-browserify": "^1.0.1",
    "platform-detect": "^3.0.1",
    "rimraf": "^3.0.2",
    "typescript": "^4.5.5",
    "url": "^0.11.0",
    "vsce": "^2.7.0",
    "xml2js": "^0.4.23"
  },
  "main": "./dist/extension.js",
  "activationEvents": [
    "onDebugResolve:mock",
    "onDebugDynamicConfigurations:mock",
    "onCommand:extension.mock-debug.getProgramName",
    "onCommand:extension.mock-debug.runEditorContents",
    "onCommand:extension.mock-debug.debugEditorContents",
    "onCommand:extension.vslabx.getMplabxInstallLocation",
    "onCommand:extension.vslabx.listProgramers",
    "onCommand:extension.vslabx.clean",
    "onCommand:extension.vslabx.build",
    "onCommand:extension.vslabx.program",
    "onCommand:workbench.action.tasks.runTask"
  ],
  "workspaceTrust": {
    "request": "never"
  },
  "contributes": {
    "menus": {
      "editor/title/run": [
        {
          "command": "extension.mock-debug.runEditorContents",
          "when": "resourceLangId == markdown",
          "group": "navigation@1"
        },
        {
          "command": "extension.mock-debug.debugEditorContents",
          "when": "resourceLangId == markdown",
          "group": "navigation@2"
        }
      ],
      "commandPalette": [
        {
          "command": "extension.mock-debug.debugEditorContents",
          "when": "resourceLangId == markdown"
        },
        {
          "command": "extension.mock-debug.runEditorContents",
          "when": "resourceLangId == markdown"
        }
      ],
      "debug/variables/context": [
        {
          "command": "extension.mock-debug.toggleFormatting",
          "when": "debugType == 'mock' && debugProtocolVariableMenuContext == 'simple'"
        }
      ]
    },
    "commands": [
      {
        "command": "extension.mock-debug.debugEditorContents",
        "title": "Debug File",
        "category": "Mock Debug",
        "enablement": "!inDebugMode",
        "icon": "$(debug-alt)"
      },
      {
        "command": "extension.mock-debug.runEditorContents",
        "title": "Run File",
        "category": "Mock Debug",
        "enablement": "!inDebugMode",
        "icon": "$(play)"
      },
      {
        "command": "extension.mock-debug.toggleFormatting",
        "title": "Toggle between decimal and hex formatting"
      },
      {
        "command": "extension.vslabx.clean",
        "title": "MPLABX: Clean Project"
      },
      {
        "command": "extension.vslabx.build",
        "title": "MPLABX: Build Project"
      },
      {
        "command": "extension.vslabx.listProgramers",
        "title": "MPLABX: List Programers"
      },
      {
        "command": "extension.vslabx.program",
        "title": "MPLABX: Program Project"
      }
    ],
    "breakpoints": [
      {
        "language": "markdown"
      }
    ],
    "debuggers": [
      {
        "type": "mock",
        "languages": [
          "markdown"
        ],
        "label": "Mock Debug",
        "program": "./out/debugAdapter.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to a text file.",
                "default": "${workspaceFolder}/${command:AskForProgramName}"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": true
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              },
              "compileError": {
                "type": "string",
                "description": "Simulates a compile error in 'launch' request.",
                "enum": [
                  "default",
                  "show",
                  "hide"
                ],
                "enumDescriptions": [
                  "default: show fake compile error to user",
                  "show fake compile error to user",
                  "do not show fake compile error to user"
                ]
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "mock",
            "request": "launch",
            "name": "Ask for file name",
            "program": "${workspaceFolder}/${command:AskForProgramName}",
            "stopOnEntry": true
          }
        ],
        "configurationSnippets": [
          {
            "label": "Mock Debug: Launch",
            "description": "A new configuration for 'debugging' a user selected markdown file.",
            "body": {
              "type": "mock",
              "request": "launch",
              "name": "Ask for file name",
              "program": "^\"\\${workspaceFolder}/\\${command:AskForProgramName}\"",
              "stopOnEntry": true
            }
          }
        ],
        "variables": {
          "$mplabxInstallLocation": "extension.vslabx.getMplabxInstallLocation"
        }
      }
    ],
    "taskDefinitions": [
      {
        "type": "mplabx",
        "required": [
          "task",
          "projectFolder"
        ],
        "properties": {
          "task": {
            "type": "string",
            "description": "The task that needs preformed",
            "enum": [
              "build",
              "clean"
            ]
          },
          "projectFolder": {
            "type": "string",
            "description": "The absolute path to the Project Folder to make"
          },
          "configuration": {
            "type": "string",
            "description": "The configuration of the project to build"
          }
        }
      }
    ],
    "problemMatchers": [
      {
        "name": "xc",
        "owner": "mplab",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ],
    "snippets": [
      {
        "language": "jsonc",
        "path": "./snippets/jsonc.json"
      }
    ]
  }
}